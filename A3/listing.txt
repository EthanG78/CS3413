/*
* fat32.h
* CS3413 Assignment 3
* Supplied for assignment with 
* modifications made by Ethan Garnier
*/
#ifndef FAT32_H
#define FAT32_H

#include <inttypes.h>

/* boot sector constants */
#define BS_OEMName_LENGTH 8
#define BS_VolLab_LENGTH 11
#define BS_FilSysType_LENGTH 8
#define DIR_Name_LENGTH 11
#define EOC 0x0FFFFFFF

#pragma pack(push)
#pragma pack(1)
struct fat32BS_struct
{
	char BS_jmpBoot[3];
	char BS_OEMName[BS_OEMName_LENGTH];
	uint16_t BPB_BytesPerSec;
	uint8_t BPB_SecPerClus;
	uint16_t BPB_RsvdSecCnt;
	uint8_t BPB_NumFATs;
	uint16_t BPB_RootEntCnt;
	uint16_t BPB_TotSec16;
	uint8_t BPB_Media;
	uint16_t BPB_FATSz16;
	uint16_t BPB_SecPerTrk;
	uint16_t BPB_NumHeads;
	uint32_t BPB_HiddSec;
	uint32_t BPB_TotSec32;
	uint32_t BPB_FATSz32;
	uint16_t BPB_ExtFlags;
	uint8_t BPB_FSVerLow;
	uint8_t BPB_FSVerHigh;
	uint32_t BPB_RootClus;
	uint16_t BPB_FSInfo;
	uint16_t BPB_BkBootSec;
	char BPB_reserved[12];
	uint8_t BS_DrvNum;
	uint8_t BS_Reserved1;
	uint8_t BS_BootSig;
	uint32_t BS_VolID;
	char BS_VolLab[BS_VolLab_LENGTH];
	char BS_FilSysType[BS_FilSysType_LENGTH];
	char BS_CodeReserved[420];
	uint8_t BS_SigA;
	uint8_t BS_SigB;
};
#pragma pack(pop)
typedef struct fat32BS_struct fat32BS;

#pragma pack(push)
#pragma pack(1)
struct fat32FSInfo_struct
{
	uint32_t FSI_LeadSig;
	char FSI_Reserved1[480];
	uint32_t FSI_StrucSig;
	uint32_t FSI_Free_Count;
	uint32_t FSI_Nxt_Free;
	char FSI_Reserved2[12];
	uint32_t FSI_TrailSig;
};
#pragma pack(pop)
typedef struct fat32FSInfo_struct fat32FSInfo;

// directory attributes
#define ATTR_READ_ONLY 0x01
#define ATTR_HIDDEN 0x02
#define ATTR_SYSTEM 0x04
#define ATTR_VOLUME_ID 0x08
#define ATTR_DIRECTORY 0x10
#define ATTR_ARCHIVE 0x20
#define ATTR_LONG_NAME ATTR_READ_ONLY | ATTR_HIDDEN | ATTR_SYSTEM | ATTR_VOLUME_ID

#pragma pack(push)
#pragma pack(1)
struct fat32Dir_struct
{
	char DIR_Name[DIR_Name_LENGTH];
	char DIR_Attr;
	char DIR_NTRes;
	char DIR_CrtTimeTenth;
	char DIR_CrtTime[2];
	char DIR_CrtDate[2];
	char DIR_LstAccDate[2];
	char DIR_FstClusHI[2];
	char DIR_WrtTime[2];
	char DIR_WrtDate[2];
	char DIR_FstClusLO[2];
	uint32_t DIR_FileSize;
};
#pragma pack(pop)
typedef struct fat32Dir_struct fat32Dir;

#pragma pack(push)
#pragma pack(1)
struct fat32Head
{
	int fd;
	char *volumeID;
	fat32BS *bs;
	fat32FSInfo *fsInfo;
	uint32_t firstDataSector;
	uint32_t nClusters;
};
#pragma pack(pop)
typedef struct fat32Head fat32Head;

fat32Head *createHead(int fd);

fat32FSInfo *readFSInfo(int fd, fat32BS *bs);

int cleanupHead(fat32Head *h);

#endif
#ifndef SHELL_H
#define SHELL_H

#include "fat32.h"

void shellLoop(int fd);

int printInfo(fat32Head *h);

int doDir(fat32Head *h, uint32_t curDirClus);

uint32_t doCD(fat32Head *h, uint32_t curDirClus, char *buffer);

int doDownload(fat32Head *h, uint32_t curDirClus, char *buffer);

#endif
/*
* util.h
* CS3413 Assignment 3
* Author: Ethan Garnier
*/
#ifndef UTIL_H
#define UTIL_H

uint32_t FindFirstSectorOfCluster(fat32Head *h, uint32_t N);

uint32_t ReadFat32Entry(fat32Head *h, uint32_t N);

int ReadFromCluster(fat32Head *h, uint32_t startCluster, uint8_t *dataBuff, uint32_t dataSize);

int RemoveTrailingWhiteSpace(char* str, char *newStr, int size);

int HasAttributes(uint8_t fileAttr, uint8_t attr);

#endif
/*
* fat32.c
* CS3413 Assignment 3
* Supplied for assignment with 
* modifications made by Ethan Garnier
*/
#define _FILE_OFFSET_BITS 64

#include <unistd.h>
#include <sys/types.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <errno.h>
#include "fat32.h"
#include "util.h"

fat32Head *createHead(int fd)
{
    // malloc new fat32BS struct
    fat32BS *bootSector = (fat32BS *)malloc(sizeof(fat32BS));

    // read the boot sector and bpb from top of fat32 file
    int nBytesRead = read(fd, bootSector, sizeof(fat32BS));
    if (nBytesRead == -1)
    {
        perror("error reading fat32 boot sector");
        free(bootSector);
        return NULL;
    }

    // check signature bytes
    if (bootSector->BS_BootSig != 0x29 || bootSector->BS_SigA != 0x55 || bootSector->BS_SigB != 0xAA)
    {
        free(bootSector);
        return NULL;
    }

    fat32FSInfo *fsInfo = readFSInfo(fd, bootSector);
    if (fsInfo == NULL)
    {
        free(bootSector);
        return NULL;
    }

    // malloc new fat32head struct
    fat32Head *head = (fat32Head *)malloc(sizeof(fat32Head));

    // set FAT file descriptor, boot sector, and fsInfo of fat32Head
    head->fd = fd;
    head->bs = bootSector;
    head->fsInfo = fsInfo;

    // determine the number of sectors in the root directory region
    // note: on FAT32 this is always 0
    uint32_t rootDirSectors = ((head->bs->BPB_RootEntCnt * 32) + (head->bs->BPB_BytesPerSec - 1)) / head->bs->BPB_BytesPerSec;

    // set first data sector of volume
    uint32_t fatSz = (head->bs->BPB_FATSz16 == 0) ? head->bs->BPB_FATSz32 : (uint32_t)head->bs->BPB_FATSz16;
    head->firstDataSector = head->bs->BPB_RsvdSecCnt + (head->bs->BPB_NumFATs * fatSz) + rootDirSectors;

    // determine the number of clusters
    uint32_t nSectors = (head->bs->BPB_TotSec16 == 0) ? head->bs->BPB_TotSec32 : (uint32_t)head->bs->BPB_TotSec16;
    uint32_t nDataSectors = nSectors - (head->bs->BPB_RsvdSecCnt + (head->bs->BPB_NumFATs * fatSz) + rootDirSectors);
    head->nClusters = nDataSectors / head->bs->BPB_SecPerClus;

    // determine the volume ID of FAT volume
    uint32_t rootDirClus = head->bs->BPB_RootClus;
    uint32_t sizeOfCluster = (uint32_t)head->bs->BPB_BytesPerSec * (uint32_t)head->bs->BPB_SecPerClus;
    uint8_t clusterBuff[sizeOfCluster];
    if (!ReadFromCluster(head, rootDirClus, clusterBuff, sizeOfCluster))
    {
        head->volumeID = (char *)malloc(sizeof(char));
        strcpy(head->volumeID, "\0");
    }
    else
    {
        fat32Dir *rootDir = (fat32Dir *)(&clusterBuff[0]);
        head->volumeID = (char *)malloc(strlen(rootDir->DIR_Name) + 1);
        strcpy(head->volumeID, rootDir->DIR_Name);
    }

    // ensure that the number of clusters is within the fat32 range
    // if there are less than 65525 data clusters, than we are reading
    // either a FAT12 or FAT16 volume and we should return NULL.
    if (head->nClusters < 65525)
    {
        cleanupHead(head);
        return NULL;
    }

    // read the first two FAT entries (signatures)
    // and ensure their signatures are correct
    uint32_t fatSig0 = ReadFat32Entry(head, 0);
    uint32_t fatSig1 = ReadFat32Entry(head, 1);

    // fatSig0 should be 0x0FFFFF.. where the lowest byte
    // corresponds to the Media entry in BPB
    uint32_t sig0 = 0x0FFFFF00 | (uint32_t)head->bs->BPB_Media;
    if (fatSig0 != sig0 || fatSig1 != EOC)
    {
        cleanupHead(head);
        return NULL;
    }

    return head;
}

fat32FSInfo *readFSInfo(int fd, fat32BS *bs)
{
    // malloc new fat32FSInfo struct
    fat32FSInfo *fsInfo = (fat32FSInfo *)malloc(sizeof(fat32FSInfo));

    // navigate to FSInfo structure
    off_t offset = lseek(fd, (bs->BPB_FSInfo * bs->BPB_BytesPerSec), SEEK_SET);
    if (offset == -1)
    {
        perror("error seeking to FSInfo structure");
        free(fsInfo);
        return NULL;
    }

    // read the FSInfo structure into fsInfo
    int nBytesRead = read(fd, fsInfo, sizeof(fat32FSInfo));
    if (nBytesRead == -1)
    {
        perror("error reading FSInfo structure");
        free(fsInfo);
        return NULL;
    }

    // check signature bits
    if (fsInfo->FSI_LeadSig != 0x41615252 || fsInfo->FSI_StrucSig != 0x61417272 || fsInfo->FSI_TrailSig != 0xAA550000)
    {
        free(fsInfo);
        return NULL;
    }

    return fsInfo;
}

int cleanupHead(fat32Head *h)
{
    if (h != NULL)
    {
        free(h->volumeID);
        free(h->bs);
        free(h->fsInfo);
        free(h);
    }

    return 0;
}
/*
* main.c
* CS3413 Assignment 3
* Author: Ethan Garnier
*/
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

#include "shell.h"

int main(int argc, char *argv[])
{
	int fd;
	if (argc != 2)
	{
		printf("Usage: %s <file>\n", argv[0]);
		exit(1);
	}

	char *file = argv[1];
	fd = open(file, O_RDWR);
	if (-1 == fd)
	{
		perror("opening file: ");
		exit(1);
	}

	shellLoop(fd);

	close(fd);
}
/*
* shell.c
* CS3413 Assignment 3
* Author: Ethan Garnier
*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <stdbool.h>
#include <string.h>

#include "shell.h"
#include "util.h"

#define BUF_SIZE 256
#define CMD_INFO "INFO"
#define CMD_DIR "DIR"
#define CMD_CD "CD"
#define CMD_GET "GET"
#define CMD_PUT "PUT"
#define CMD_EXIT "EXIT"

void shellLoop(int fd)
{
	int running = true;
	uint32_t curDirClus;
	char buffer[BUF_SIZE];
	char bufferRaw[BUF_SIZE];

	// TODO:
	fat32Head *h = createHead(fd);

	if (h == NULL)
		running = false;
	else								  // valid, grab the root cluster
		curDirClus = h->bs->BPB_RootClus; // TODO

	while (running)
	{
		printf(">");
		if (fgets(bufferRaw, BUF_SIZE, stdin) == NULL)
		{
			running = false;
			continue;
		}
		bufferRaw[strlen(bufferRaw) - 1] = '\0'; /* cut new line */
		for (int i = 0; i < strlen(bufferRaw) + 1; i++)
			buffer[i] = toupper(bufferRaw[i]);

		if (strncmp(buffer, CMD_INFO, strlen(CMD_INFO)) == 0)
		{
			printInfo(h);
		}
		else if (strncmp(buffer, CMD_DIR, strlen(CMD_DIR)) == 0)
		{
			if (doDir(h, curDirClus) == 0)
				printf("\nError: unable to run dir command\n");
		}
		else if (strncmp(buffer, CMD_CD, strlen(CMD_CD)) == 0)
		{
			curDirClus = doCD(h, curDirClus, buffer);
		}
		else if (strncmp(buffer, CMD_GET, strlen(CMD_GET)) == 0)
		{
			if (doDownload(h, curDirClus, buffer) == 0)
				printf("\nError: file not found\n");
		}
		else if (strncmp(buffer, CMD_PUT, strlen(CMD_PUT)) == 0)
		{

			// i am sorry... i wanted to do this but ran out of time...
			// doUpload(h, curDirClus, buffer, bufferRaw);
			printf("Bonus marks!\n");
		}
		else if (strncmp(buffer, CMD_EXIT, strlen(CMD_EXIT)) == 0)
		{
			running = false;
		}
		else
		{
			printf("\nCommand not found\n");
		}
	}
	printf("\nExited...\n");

	cleanupHead(h);
}

int printInfo(fat32Head *h)
{
	/*
		Need to print 3 sections:
		1. Device Info:
			- OEM Name
			- Label
			- File System Type
			- Media Type
			- Size
			- Drive Number
	*/
	printf("---- Device Info ----\n");

	char oemname[BS_OEMName_LENGTH + 1];
	snprintf(oemname, BS_OEMName_LENGTH + 1, "%s", h->bs->BS_OEMName);
	printf(" OEM Name: %s\n", oemname);

	char vollab[BS_VolLab_LENGTH + 1];
	snprintf(vollab, BS_VolLab_LENGTH + 1, "%s", h->bs->BS_VolLab);
	printf(" Label: %s\n", vollab);

	char filsystype[BS_FilSysType_LENGTH + 1];
	snprintf(filsystype, BS_FilSysType_LENGTH + 1, "%s", h->bs->BS_FilSysType);
	printf(" File System Type: %s\n", filsystype);

	if ((h->bs->BPB_Media & 0xF8) == 0xF8)
	{
		printf(" Media Type: 0x%X (fixed)\n", h->bs->BPB_Media);
	}
	else
	{
		printf(" Media Type: 0x%X (not fixed)\n", h->bs->BPB_Media);
	}

	uint32_t totalSectors = (h->bs->BPB_TotSec16 == 0)
								? h->bs->BPB_TotSec32
								: h->bs->BPB_TotSec16;

	uint64_t totalBytes = (uint64_t)h->bs->BPB_BytesPerSec * (uint64_t)totalSectors;
	double totalMBytes = (double)totalBytes / (1000000);
	double totalGBytes = (double)totalBytes / (1000000000);

	printf(" Size: %ld (%.3fMB, %.3fGB)\n", totalBytes, totalMBytes, totalGBytes);

	printf(" Drive Number: %d ", h->bs->BS_DrvNum);

	if ((h->bs->BS_DrvNum & 0x80) == 0x80)
	{
		printf("(hard drive)\n");
	}
	else if ((h->bs->BS_DrvNum & 0x00) == 0x00)
	{
		printf("(floppy disk)\n");
	}
	else
	{
		printf("(unknown)\n");
	}

	/*
		2. Geometry
			- Bytes per Sector
			- Sectors per Cluster
			- Total Sectors
			- Geom: Sectors per Track
			- Geom: Heads
			- Hidden Sectors
	*/
	printf("\n---- Geometry ----\n");
	printf(" Bytes per Sector: %d\n", h->bs->BPB_BytesPerSec);
	printf(" Sectors per Cluster: %d\n", h->bs->BPB_SecPerClus);
	printf(" Total Sectors: %d\n", totalSectors);
	printf(" Geom: Sectors per Track: %d\n", h->bs->BPB_SecPerTrk);
	printf(" Geom: Heads: %d\n", h->bs->BPB_NumHeads);
	printf(" Hidden Sectors: %d\n", h->bs->BPB_HiddSec);

	/*
		3. FS Info
			- Volume ID
			- Version
			- Reserved Sectors
			- Number of FATs
			- FAT Size
			- Mirrored FAT
			- Boot Sector Backup Sector No
	*/
	printf("\n---- FS Info ----\n");
	printf(" Volume ID: %s\n", h->volumeID);
	printf(" Version: %d.%d\n", h->bs->BPB_FSVerHigh, h->bs->BPB_FSVerLow);
	printf(" Reserved Sectors: %d\n", h->bs->BPB_RsvdSecCnt);
	printf(" Number of FATs: %d\n", h->bs->BPB_NumFATs);

	uint32_t fatSize = (h->bs->BPB_FATSz16 == 0)
						   ? h->bs->BPB_FATSz32
						   : h->bs->BPB_FATSz16;
	printf(" FAT Size: %d\n", fatSize);

	uint16_t mirroredFATBit = (h->bs->BPB_ExtFlags & 0x0040) >> 6;
	if (mirroredFATBit)
	{
		printf(" Mirrored FAT: %d (no)\n", mirroredFATBit);
	}
	else
	{
		printf(" Mirrored FAT: %d (yes)\n", mirroredFATBit);
	}

	printf(" Boot Sector Backup Sector No: %d\n", h->bs->BPB_BkBootSec);

	printf("\n");

	return 0;
}

int doDir(fat32Head *h, uint32_t curDirClus)
{
	printf("\nDIRECTORY LISTING\n");
	printf("VOL_ID: %s\n\n", h->volumeID);

	fat32Dir *dir = NULL;

	char name[9];
	char ext[4];

	uint32_t sizeOfCluster = (uint32_t)h->bs->BPB_BytesPerSec * (uint32_t)h->bs->BPB_SecPerClus;
	uint8_t clusterBuff[sizeOfCluster];

	// Keep reading directory entries until we read an EOC in
	// the FAT, this indicates we have reached the last cluster
	// of this particular directory.
	do
	{
		if (!ReadFromCluster(h, curDirClus, clusterBuff, sizeOfCluster))
		{
			printf("There was an issue reading cluster %d\n", curDirClus);
			return 0;
		}

		// cast the cluster we just read to our dir structure
		dir = (fat32Dir *)(&clusterBuff[0]);

		// keep incrementing dir until we reach the last entry
		while (dir->DIR_Name[0] != 0x00)
		{
			// if dir->DIR_Name[0] == 0xE5
			// then there is nothing stored in
			// it and we may skip it
			if (dir->DIR_Name[0] != 0xE5)
			{
				if (!RemoveTrailingWhiteSpace(dir->DIR_Name, name, 8))
				{
					printf("There was an issue parsing file name: %s\n", dir->DIR_Name);
					return 0;
				}

				if (!RemoveTrailingWhiteSpace(&dir->DIR_Name[8], ext, 3))
				{
					printf("There was an issue parsing file extension: %s\n", dir->DIR_Name);
					return 0;
				}

				if (HasAttributes(dir->DIR_Attr, ATTR_DIRECTORY))
				{
					// print directory
					printf("<%s%s>", name, ext);
					printf("\t\t%d\n", dir->DIR_FileSize);
				}
				else
				{
					if (!HasAttributes(dir->DIR_Attr, ATTR_HIDDEN) && !HasAttributes(dir->DIR_Attr, ATTR_VOLUME_ID))
					{
						// print file name with file size
						printf("%s.%s", name, ext);
						printf("\t\t%d\n", dir->DIR_FileSize);
					}
				}
			}

			dir++;
		}

		// read the FAT entry for the current cluster,
		// and store its contents in curDirClus to read next
		curDirClus = ReadFat32Entry(h, curDirClus);
	} while (curDirClus != EOC && curDirClus < 0x0FFFFFF8 && dir != NULL);

	uint64_t freeBytes;
	uint32_t freeClus = h->fsInfo->FSI_Free_Count;
	if (freeClus != 0xFFFFFFFF && freeClus <= h->nClusters)
	{
		freeBytes = (uint64_t)freeClus * (uint64_t)h->bs->BPB_SecPerClus * (uint64_t)h->bs->BPB_BytesPerSec;
		printf("---Bytes Free: %ld\n", freeBytes);
	}
	else
	{
		printf("---Bytes Free: unknown\n");
	}

	printf("---DONE\n");

	return 1;
}

uint32_t doCD(fat32Head *h, uint32_t curDirClus, char *buffer)
{
	fat32Dir *dir = NULL;

	uint32_t newDirClus = 0;
	uint32_t nextEntry = curDirClus;

	char dirname[12];

	uint32_t sizeOfCluster = (uint32_t)h->bs->BPB_BytesPerSec * (uint32_t)h->bs->BPB_SecPerClus;
	uint8_t clusterBuff[sizeOfCluster];

	// Keep reading directory entries until we read an EOC in
	// the FAT, this indicates we have reached the last cluster
	// of this particular directory.
	do
	{
		if (!ReadFromCluster(h, nextEntry, clusterBuff, sizeOfCluster))
		{
			printf("There was an issue reading cluster %d\n", nextEntry);
			return 0;
		}

		// cast the cluster we just read to our dir structure
		dir = (fat32Dir *)(&clusterBuff[0]);

		// keep incrementing dir until we reach the last entry
		while (dir->DIR_Name[0] != 0x00)
		{
			// if dir->DIR_Name[0] == 0xE5
			// then there is nothing stored in
			// it and we may skip it
			if (dir->DIR_Name[0] != 0xE5)
			{
				// check if this entry is a directory
				if (HasAttributes(dir->DIR_Attr, ATTR_DIRECTORY))
				{
					if (!RemoveTrailingWhiteSpace(dir->DIR_Name, dirname, 11))
					{
						printf("There was an issue parsing directory name: %s\n", dir->DIR_Name);
						return 0;
					}

					// check if this directory is the one we are looking for
					if (strncmp(&buffer[strlen(CMD_CD) + 1], dirname, strlen(&buffer[strlen(CMD_CD) + 1])) == 0)
					{
						// we found the directory we want to cd into
						// lets return the first cluster

						newDirClus = ((((uint32_t)dir->DIR_FstClusHI[1]) << 24) | (((uint32_t)dir->DIR_FstClusHI[0]) << 16) | (((uint32_t)dir->DIR_FstClusLO[1]) << 8) | (uint32_t)dir->DIR_FstClusLO[0]) & 0x0FFFFFFF;

						// note taken from whitepages
						// The dotdot entry points to the starting cluster
						// of the parent of this directory (which is 0 if
						// this directories parent is the root directory.
						// Therefore lets check if newDirClus == 0, if so
						// return the cluster of root directory

						return (newDirClus == 0) ? h->bs->BPB_RootClus : newDirClus;
					}
				}
			}

			dir++;
		}

		// read the FAT entry for the current cluster,
		// and store its contents in nextEntry to read next
		nextEntry = ReadFat32Entry(h, nextEntry);
	} while (nextEntry != EOC && nextEntry < 0x0FFFFFF8 && dir != NULL);

	printf("Error: folder not found\n");

	// if we fail to find the directory the user want
	// then just return the cluster of the directory
	// that the user is currently in
	return curDirClus;
}

int doDownload(fat32Head *h, uint32_t curDirClus, char *buffer)
{
	fat32Dir *dir = NULL;

	uint32_t nextEntry = curDirClus;

	char name[9];
	char ext[4];

	uint32_t sizeOfCluster = (uint32_t)h->bs->BPB_BytesPerSec * (uint32_t)h->bs->BPB_SecPerClus;
	uint8_t clusterBuff[sizeOfCluster];

	// Keep reading directory entries until we read an EOC in
	// the FAT, this indicates we have reached the last cluster
	// of this particular directory.
	do
	{
		if (!ReadFromCluster(h, nextEntry, clusterBuff, sizeOfCluster))
		{
			printf("There was an issue reading cluster %d\n", nextEntry);
			return 0;
		}

		// cast the cluster we just read to our dir structure
		dir = (fat32Dir *)(&clusterBuff[0]);

		// keep incrementing dir until we reach the last entry
		while (dir->DIR_Name[0] != 0x00)
		{
			// if dir->DIR_Name[0] == 0xE5
			// then there is nothing stored in
			// it and we may skip it
			if (dir->DIR_Name[0] != 0xE5)
			{
				// we do not want to download a directory
				if (!HasAttributes(dir->DIR_Attr, ATTR_DIRECTORY))
				{
					if (!RemoveTrailingWhiteSpace(dir->DIR_Name, name, 8))
					{
						printf("There was an issue parsing file name: %s\n", dir->DIR_Name);
						return 0;
					}

					if (!RemoveTrailingWhiteSpace(&dir->DIR_Name[8], ext, 3))
					{
						printf("There was an issue parsing file extension: %s\n", dir->DIR_Name);
						return 0;
					}

					// concatenate file name and file extension
					char fullname[DIR_Name_LENGTH + 3];
					snprintf(fullname, sizeof(fullname), "%s.%s", name, ext);

					// check if this file is the one we are looking for
					if (strncmp(&buffer[strlen(CMD_GET) + 1], fullname, strlen(&buffer[strlen(CMD_GET) + 1])) == 0)
					{
						// we found the file we want to download.

						// lets create a local file where we will store data of downloaded file
						int fd = open(fullname, O_CREAT | O_RDWR, 0700);
						if (fd == -1)
						{
							perror("error creating new file");
							return 0;
						}

						// follow FAT table starting from first cluster of file
						uint32_t fileCluster = ((((uint32_t)dir->DIR_FstClusHI[1]) << 24) | (((uint32_t)dir->DIR_FstClusHI[0]) << 16) | (((uint32_t)dir->DIR_FstClusLO[1]) << 8) | (uint32_t)dir->DIR_FstClusLO[0]) & 0x0FFFFFFF;

						// count the number of contiguous clusters we want to read
						int contiguousClusters = 0;

						// keep track of intermit cluster numbers
						uint32_t testCluster;

						// the size of the data chunk we want to read, note that
						// this may change on each while loop iteration
						uint32_t dataSize = 0;

						// keep track of how many bytes we have left to download,
						// and ensure we don't write the slack space at the end
						// of the final cluster to file.
						uint32_t bytesLeftToDownload = dir->DIR_FileSize;

						// bulk reading for file download
						while (fileCluster != EOC && fileCluster < 0x0FFFFFF8)
						{
							// calculate the value of contiguousClusters...
							// this is accomplished by following the cluster chain
							// until the next cluster DOES NOT equal the first cluster
							// plus contiguousClusters
							// note that we MUST KEEP TRACK of the first cluster in
							// this cluster chain as that is where we read from, here
							// this is fileCluster
							do
							{
								testCluster = ReadFat32Entry(h, fileCluster + contiguousClusters);
								contiguousClusters++;
							} while (testCluster == fileCluster + contiguousClusters && testCluster != EOC && testCluster < 0x0FFFFFF8);

							// set the number of bytes we want to read starting
							// at cluster fileCluster
							dataSize = sizeOfCluster * contiguousClusters;

							// we don't want to read more bytes than we need,
							// so if dataSize is greater than bytesLeftToDownload, 
							// we will truncate it to bytesLeftToDownload.
							dataSize = (dataSize > bytesLeftToDownload) ? bytesLeftToDownload : dataSize;

							// define the buffer to hold data bytes
							uint8_t dataBuff[dataSize];

							// read the dataSize bytes from cluster fileCluster into dataBuff 
							if (!ReadFromCluster(h, fileCluster, dataBuff, dataSize))
							{
								printf("There was an issue reading cluster %d\n", fileCluster);
								return 0;
							}

							// write the bytes from that cluster to file
							if (write(fd, dataBuff, dataSize) == -1)
							{
								perror("error writing to file");
								close(fd);
								return 0;
							}

							// reset the contiguousClusters counter
							contiguousClusters = 0;

							fileCluster = testCluster;

							// subtract the number of btyes we wrote to file
							bytesLeftToDownload -= dataSize;
						}

						// make sure to close the file descriptor
						close(fd);

						return 1;
					}
				}
			}

			dir++;
		}

		// read the FAT entry for the current cluster,
		// and store its contents in nextEntry to read next
		nextEntry = ReadFat32Entry(h, nextEntry);
	} while (nextEntry != EOC && nextEntry < 0x0FFFFFF8 && dir != NULL);

	return 0;
}
/*
* util.c
* CS3413 Assignment 3
* Author: Ethan Garnier
*/
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <errno.h>
#include "fat32.h"
#include "util.h"

// FindFirstSectorOfCluster determines the first sector number
// of a given cluster N in the data area of a FAT volume. This
// function must be passed the fat32Head object of the Fat volume.
//
// Returns a uint32_t value that represents the first sector number
// of the cluster N.
uint32_t FindFirstSectorOfCluster(fat32Head *h, uint32_t N)
{
    return ((N - 2) * h->bs->BPB_SecPerClus) + h->firstDataSector;
}

// ReadFat32Entry reads the contents of the FAT table that are
// related to data cluster number N of the FAT volume. This
// function must be passed the fat32Head object of the Fat volume and
// a file descriptor for the FAT volume. This function ONLY WORKS
// FOR FAT32 VOLUMES.
//
// Returns a uint32_t value that represents the contents
// of the read FAT entry. Please note, that if this function
// returns a value >= 0x0FFFFFF8 then that represents EOF
uint32_t ReadFat32Entry(fat32Head *h, uint32_t N)
{
    uint32_t fatOffset = N * 4;
    uint32_t fatSecNum = h->bs->BPB_RsvdSecCnt + (fatOffset / h->bs->BPB_BytesPerSec);
    uint32_t fatEntryOffset = fatOffset % h->bs->BPB_BytesPerSec;

    // go to the specific FAT sector
    off_t offset = lseek(h->fd, (fatSecNum * (uint32_t)h->bs->BPB_BytesPerSec), SEEK_SET);
    if (offset == -1)
    {
        // todo: just return EOF?
        perror("error seeking to fat entry sector");
        return 0x0FFFFFF8;
    }

    // todo: do we need to read the ENTIRE sector
    // into memory? can we just read the 4 bytes we need?
    // read sector into sector byte array
    uint8_t secBuff[h->bs->BPB_BytesPerSec];
    int bytesRead = read(h->fd, secBuff, h->bs->BPB_BytesPerSec);
    if (bytesRead == -1)
    {
        perror("error reading fat entry");
        return 0x0FFFFFF8;
    }

    // return the specific entry at calculated offset
    return (*((uint32_t *)&secBuff[fatEntryOffset])) & 0x0FFFFFFF;
}

// ReadFromCluster reads dataSize amount of bytes starting from cluster startCluster into the
// dataBuff byte buffer that must be of size dataSize. This function only calls the read() function
// once. This function can read multiple contiguous clusters at once, given clusterSize spans multiple
// clusters.
//
// ReadFromCluster returns 1 indicating success, and 0 indicating error.
int ReadFromCluster(fat32Head *h, uint32_t startCluster, uint8_t *dataBuff, uint32_t dataSize)
{
    uint32_t firstSectorofCluster = FindFirstSectorOfCluster(h, startCluster);
    off_t offset = lseek(h->fd, firstSectorofCluster * (uint32_t)h->bs->BPB_BytesPerSec, SEEK_SET);
    if (offset == -1)
    {
        perror("error seeking to cluster");
        return 0;
    }

    int bytesRead = read(h->fd, dataBuff, dataSize);
    if (bytesRead == -1)
    {
        perror("error reading cluster bytes");
        return 0;
    }

    return 1;
}

// RemoveTrailingWhiteSpace replaces all trailing
// white space in str of size size with the null-terminating
// byte. New string is stored in newStr of size size + 1.
// The null terminated byte is appended at the end of newStr
//
// Returns 1 indicating success
int RemoveTrailingWhiteSpace(char *str, char *newStr, int size)
{
    int i;
    for (i = 0; i < size; i++)
    {
        newStr[i] = (str[i] == ' ') ? '\0' : str[i];
    }

    newStr[size] = '\0';
    return 1;
}

// HasAttribures checks to see if the 32 bit fileAttr field
// contains the attributes outlines by the 8 bit attr field.
//
// Returns 1 indicating that attr is found within fileAttr, 0 otherwise.
int HasAttributes(uint8_t fileAttr, uint8_t attr)
{
    return ((fileAttr & attr) == attr);
}
